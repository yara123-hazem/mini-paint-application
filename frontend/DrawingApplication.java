/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package frontend;

import shapes.Shape;
import shapes.Shapee;
import java.awt.Color;
import java.awt.Point;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JComboBox;
import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.parser.ParseException;
import shapes.LineSegment;
import shapes.Oval;
import shapes.Rectangle;
import shapes.Triangle;

/**
 *
 * @author sophi
 */
public class DrawingApplication extends Node {

    private OvalProperties cP;
    private RectangleProperties rP;
    private SquareProperties sP;
    private LineProperties lP;
    private Colorize c;
    private TriangleProperties tP;
    private Shapee selectedShape;

    /**
     * Creates new form DrawingApplication
     */
    public DrawingApplication() {
        initComponents();
        myPanel1.setBackground(Color.WHITE);
        cP = null;
        rP = null;
        c = null;
        sP = null;
        lP = null;
        tP = null;
        setData(myPanel1.getShapes());
        selectedShape = null;
    }

    @Override
    public void setData(Shape[] shapes) {
        String[] data = new String[shapes.length];
        for (int i = 0; i < shapes.length; i++) {
            data[i] = shapes[i].getName();
        }
        getjComboBox2().setModel(new DefaultComboBoxModel(data));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jFileChooser1 = new javax.swing.JFileChooser();
        ovalButton = new javax.swing.JButton();
        lineSegmentButton = new javax.swing.JButton();
        squareButton = new javax.swing.JButton();
        RectangleButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        colorizeButton = new javax.swing.JButton();
        deleteButton = new javax.swing.JButton();
        jComboBox2 = new javax.swing.JComboBox<>();
        myPanel1 = new MyPanel();
        triangleButton = new javax.swing.JButton();
        copyButton1 = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        saveMenuItem = new javax.swing.JMenuItem();
        loadMenuItem = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();

        jFileChooser1.setCurrentDirectory(new java.io.File("E:\\College\\2nd year\\Term 5\\Programming II\\Labs\\Lab9\\TestFiles"));

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Drawing Application");
        setBackground(new java.awt.Color(51, 255, 255));
        setResizable(false);

        ovalButton.setBackground(java.awt.SystemColor.activeCaption);
        ovalButton.setText("Oval");
        ovalButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ovalButtonActionPerformed(evt);
            }
        });

        lineSegmentButton.setBackground(java.awt.SystemColor.activeCaption);
        lineSegmentButton.setText("Line Segment");
        lineSegmentButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lineSegmentButtonActionPerformed(evt);
            }
        });

        squareButton.setBackground(java.awt.SystemColor.activeCaption);
        squareButton.setText("Square");
        squareButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                squareButtonActionPerformed(evt);
            }
        });

        RectangleButton.setBackground(java.awt.SystemColor.activeCaption);
        RectangleButton.setText("Rectangle");
        RectangleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RectangleButtonActionPerformed(evt);
            }
        });

        jLabel1.setText("Select Shape");

        colorizeButton.setBackground(java.awt.SystemColor.activeCaption);
        colorizeButton.setText("Colorize");
        colorizeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                colorizeButtonActionPerformed(evt);
            }
        });

        deleteButton.setBackground(java.awt.SystemColor.activeCaption);
        deleteButton.setText("Delete");
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        jComboBox2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jComboBox2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox2ActionPerformed(evt);
            }
        });

        myPanel1.setBackground(new java.awt.Color(255, 255, 255));
        myPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 255)));
        myPanel1.setForeground(new java.awt.Color(255, 255, 255));
        myPanel1.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                myPanel1MouseDragged(evt);
            }
        });
        myPanel1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                myPanel1MouseClicked(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                myPanel1MouseReleased(evt);
            }
        });

        javax.swing.GroupLayout myPanel1Layout = new javax.swing.GroupLayout(myPanel1);
        myPanel1.setLayout(myPanel1Layout);
        myPanel1Layout.setHorizontalGroup(
            myPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 395, Short.MAX_VALUE)
        );
        myPanel1Layout.setVerticalGroup(
            myPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 184, Short.MAX_VALUE)
        );

        triangleButton.setBackground(java.awt.SystemColor.activeCaption);
        triangleButton.setText("Triangle");
        triangleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                triangleButtonActionPerformed(evt);
            }
        });

        copyButton1.setBackground(java.awt.SystemColor.activeCaption);
        copyButton1.setText("Copy");
        copyButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                copyButton1ActionPerformed(evt);
            }
        });

        jMenu1.setText("File");

        saveMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        saveMenuItem.setText("Save As");
        saveMenuItem.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                saveMenuItemItemStateChanged(evt);
            }
        });
        saveMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveMenuItemActionPerformed(evt);
            }
        });
        jMenu1.add(saveMenuItem);

        loadMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_L, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        loadMenuItem.setText("Load");
        loadMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadMenuItemActionPerformed(evt);
            }
        });
        jMenu1.add(loadMenuItem);

        jMenuBar1.add(jMenu1);
        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(29, 29, 29)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 247, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(jComboBox2, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(colorizeButton)
                                    .addGap(18, 18, 18)
                                    .addComponent(deleteButton)))
                            .addComponent(copyButton1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(ovalButton, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(1, 1, 1)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(myPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addComponent(lineSegmentButton, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(squareButton)
                        .addGap(18, 18, 18)
                        .addComponent(RectangleButton)
                        .addGap(18, 18, 18)
                        .addComponent(triangleButton)))
                .addGap(14, 14, 14))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(104, 104, 104)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(colorizeButton)
                    .addComponent(deleteButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(copyButton1)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(14, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ovalButton, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lineSegmentButton, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(squareButton, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(RectangleButton, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(triangleButton, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(15, 15, 15)
                .addComponent(myPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(29, 29, 29))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void colorizeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_colorizeButtonActionPerformed
        try {
            String str = jComboBox2.getSelectedItem().toString();
            Shape s = myPanel1.getShape(str);
            c = new Colorize(s, myPanel1);
            c.setParentNode(this);
            this.setVisible(false);
            c.setVisible(true);
        } catch (NullPointerException ex) {
        }
    }//GEN-LAST:event_colorizeButtonActionPerformed

    private void lineSegmentButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lineSegmentButtonActionPerformed
        lP = new LineProperties(myPanel1);
        lP.setParentNode(this);
        this.setVisible(false);
        lP.setVisible(true);
    }//GEN-LAST:event_lineSegmentButtonActionPerformed

    private void ovalButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ovalButtonActionPerformed
        cP = new OvalProperties(myPanel1);
        cP.setParentNode(this);
        this.setVisible(false);
        cP.setVisible(true);
    }//GEN-LAST:event_ovalButtonActionPerformed

    private void squareButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_squareButtonActionPerformed
        sP = new SquareProperties(myPanel1);
        sP.setParentNode(this);
        this.setVisible(false);
        sP.setVisible(true);
    }//GEN-LAST:event_squareButtonActionPerformed

    private void RectangleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RectangleButtonActionPerformed
        rP = new RectangleProperties(myPanel1);
        rP.setParentNode(this);
        this.setVisible(false);
        rP.setVisible(true);
    }//GEN-LAST:event_RectangleButtonActionPerformed

    private void jComboBox2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox2ActionPerformed
        // TODO add your handling code here:
        int i = jComboBox2.getSelectedIndex();
        String str = jComboBox2.getItemAt(i);
        selectedShape = (Shapee) myPanel1.getShape(str);

    }//GEN-LAST:event_jComboBox2ActionPerformed

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
        try {
            String str = jComboBox2.getSelectedItem().toString();
            Shape s = myPanel1.getShape(str);
            myPanel1.removeShape(s);
            myPanel1.refresh(null);
            setData(myPanel1.getShapes());
        } catch (NullPointerException ex) {
        }
    }//GEN-LAST:event_deleteButtonActionPerformed

    private void myPanel1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_myPanel1MouseClicked
        int i;
        String str;
        Shapee s;
        for (i = 0; i < jComboBox2.getItemCount(); i++) {
            str = jComboBox2.getItemAt(i);
            s = (Shapee) myPanel1.getShape(str);
            if (s.contains(evt.getPoint())) {
                jComboBox2.setSelectedIndex(i);
                selectedShape = s;
                selectedShape.setIsSelected(true);
                myPanel1.refresh(null);
                for (int j = 0; j < jComboBox2.getItemCount(); j++) {
                    String str2 = jComboBox2.getItemAt(j);
                    Shapee s2 = (Shapee) myPanel1.getShape(str2);
                    if (s2 != s) {
                        s2.setIsSelected(false);
                    }
                }
                break;
            } else {
                s.setIsSelected(false);
                myPanel1.refresh(null);
            }
        }
    }//GEN-LAST:event_myPanel1MouseClicked

    private void myPanel1MouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_myPanel1MouseDragged
        myPanel1MouseClicked(evt);
        if (selectedShape != null) {
            selectedShape.setIsSelected(true);
            myPanel1.refresh(null);
            if (selectedShape.vertixCaught(evt.getPoint()) >= 0) {
                resizing(evt, selectedShape.vertixCaught(evt.getPoint()));
            } else if (selectedShape.contains(evt.getPoint())) {
                moving(evt);
            }
        }
    }//GEN-LAST:event_myPanel1MouseDragged

    public void moving(java.awt.event.MouseEvent evt) {
        selectedShape.moveTo(evt.getPoint());
        selectedShape.setDraggingPoint(evt.getPoint());
        myPanel1.refresh(null);
    }

    public void resizing(java.awt.event.MouseEvent evt, int i) {
        selectedShape.resize(evt.getPoint(), i);
        myPanel1.refresh(null);

    }

    private void myPanel1MouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_myPanel1MouseReleased
        if (selectedShape != null) {
            selectedShape.setDraggingPoint(null);
        }
    }//GEN-LAST:event_myPanel1MouseReleased

    private void triangleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_triangleButtonActionPerformed
        // TODO add your handling code here:
        tP = new TriangleProperties(myPanel1);
        tP.setParentNode(this);
        this.setVisible(false);
        tP.setVisible(true);
    }//GEN-LAST:event_triangleButtonActionPerformed

    private void saveMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveMenuItemActionPerformed
        jFileChooser1.showSaveDialog(this);
        JSONArray shapesObjList = new JSONArray();
        Shape[] shapes = myPanel1.getShapes();
        for (int i = 0; i < shapes.length; i++) {
            JSONObject borderColorObj = new JSONObject();
            JSONObject fillColorObj = new JSONObject();
            JSONObject obj = new JSONObject();
            JSONObject shapeObj = new JSONObject();
            obj.put("position.x", shapes[i].getPosition().x);
            obj.put("position.y", shapes[i].getPosition().y);
            borderColorObj.put("r", shapes[i].getColor().getRed());
            borderColorObj.put("g", shapes[i].getColor().getGreen());
            borderColorObj.put("b", shapes[i].getColor().getBlue());
            obj.put("borderColor", borderColorObj);
            fillColorObj.put("r", shapes[i].getFillColor().getRed());
            fillColorObj.put("g", shapes[i].getFillColor().getGreen());
            fillColorObj.put("b", shapes[i].getFillColor().getBlue());
            obj.put("fillColor", fillColorObj);
            switch (getShapeType(shapes[i])) {
                case 0:
                    Oval o = (Oval) shapes[i];
                    obj.put("Hradius", o.getHradius());
                    obj.put("Vradius", o.getVradius());
                    obj.put("shapeType", 0);
                    break;
                case 1:
                    LineSegment l = (LineSegment) shapes[i];
                    obj.put("endPoint.x", l.getEndPoint().x);
                    obj.put("endPoint.y", l.getEndPoint().y);
                    obj.put("shapeType", 1);
                    break;
                case 2:
                    Rectangle r = (Rectangle) shapes[i];
                    obj.put("height", r.getHeight());
                    obj.put("width", r.getWidth());
                    obj.put("shapeType", 2);
                    break;
                case 3:
                    Triangle t = (Triangle) shapes[i];
                    obj.put("point2.x", t.getPoint2().x);
                    obj.put("point2.y", t.getPoint2().y);
                    obj.put("point3.x", t.getPoint3().x);
                    obj.put("point3.y", t.getPoint3().y);
                    obj.put("shapeType", 3);
                    break;
            }
            shapeObj.put(i, obj);
            shapesObjList.add(shapeObj);
        }
        try ( FileWriter file = new FileWriter(jFileChooser1.getSelectedFile().getAbsolutePath())) {
            file.write(shapesObjList.toJSONString());
            file.flush();
        } catch (IOException e) {
            System.out.println("io from save");
        }
    }//GEN-LAST:event_saveMenuItemActionPerformed

    private void saveMenuItemItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_saveMenuItemItemStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_saveMenuItemItemStateChanged

    private void loadMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadMenuItemActionPerformed
        // TODO add your handling code here:
        jFileChooser1.showOpenDialog(this);
        myPanel1.clear();
        JSONParser parser = new JSONParser();
        try ( FileReader fileReader = new FileReader(jFileChooser1.getSelectedFile().getAbsolutePath())) {
            Object Object = parser.parse(fileReader);
            JSONArray shapesObjList = (JSONArray) Object;
            for (int i = 0; i < shapesObjList.size(); i++) {
                JSONObject shapeObj = (JSONObject) shapesObjList.get(i);
                ////////////////////////
                System.out.println(shapeObj);
                JSONObject obj = (JSONObject) shapeObj.get("" + i);
                //////////////////////
                System.out.println(obj);
                JSONObject borderColorObj = (JSONObject) obj.get("borderColor");
                ///////////////////////////
                System.out.println(borderColorObj);
                Color bColor = new Color((int) ((long) borderColorObj.get("r")), (int) ((long) borderColorObj.get("g")), (int) ((long) borderColorObj.get("b")));
                JSONObject fillColorObj = (JSONObject) obj.get("fillColor");
                ///////////////////////
                System.out.println(fillColorObj);
                Color fColor = new Color((int) ((long) fillColorObj.get("r")), (int) ((long) fillColorObj.get("g")), (int) ((long) fillColorObj.get("b")));
                int x = (int) ((long) obj.get("position.x"));
                int y = (int) ((long) obj.get("position.y"));
                Shape s = null;
                switch ((int) ((long) obj.get("shapeType"))) {
                    case 0:
                        s = new Oval((double) obj.get("Hradius"), (double) obj.get("Vradius"), bColor, fColor, x, y);
                        break;
                    case 1:
                        int endX = (int) ((long) obj.get("endPoint.x"));
                        int endY = (int) ((long) obj.get("endPoint.y"));
                        s = new LineSegment(x, y, endX, endY, bColor);
                        break;
                    case 2:
                        int h = (int) ((long) obj.get("height"));
                        int w = (int) ((long) obj.get("width"));
                        s = new Rectangle(x, y, h, w, bColor, fColor);
                        break;
                    case 3:
                        int x2 = (int) ((long) obj.get("point2.x"));
                        int y2 = (int) ((long) obj.get("point2.y"));
                        int x3 = (int) ((long) obj.get("point3.x"));
                        int y3 = (int) ((long) obj.get("point3.y"));
                        s = new Triangle(x, y, x2, y2, x3, y3, bColor, fColor);
                        break;
                }
                if (s != null);
                {
                    myPanel1.addShape(s);
                    myPanel1.refresh(null);
                    setData(myPanel1.getShapes());
                }
            }
        } catch (FileNotFoundException e) {
            System.out.println("f");
        } catch (IOException e) {
            System.out.println("io");
        } catch (ParseException e) {
            System.out.println("p");
        } catch (Exception e) {
            System.out.println("e");
        }
    }//GEN-LAST:event_loadMenuItemActionPerformed

    public int getShapeType(Shape s) {
        if (s instanceof Oval) {
            return 0;
        }
        if (s instanceof LineSegment) {
            return 1;
        }
        if (s instanceof Rectangle) {
            return 2;
        }
        if (s instanceof Triangle) {
            return 3;
        }
        return -1;
    }

    private void copyButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_copyButton1ActionPerformed
        // TODO add your handling code here:
        try {
            String str = jComboBox2.getSelectedItem().toString();
            Shape s = (Shape) myPanel1.getShape(str);
            if (s instanceof Oval) {
                Oval c = (Oval) s;
                double hr = c.getHradius();
                double vr = c.getVradius();
                Oval c1 = new Oval(s.getPosition().x + (int) hr, s.getPosition().y + (int) vr, (int) hr, (int) vr, s.getColor(), s.getFillColor());
                myPanel1.addShape(c1);
            } else if (s instanceof Rectangle) {
                Rectangle r = (Rectangle) s;
                int h = r.getHeight();
                int w = r.getWidth();
                Rectangle r1 = new Rectangle(s.getPosition().x, s.getPosition().y, h, w, s.getColor(), s.getFillColor());
                myPanel1.addShape(r1);
            } else if (s instanceof LineSegment) {
                LineSegment l = (LineSegment) s;
                Point k = l.getEndPoint();
                LineSegment l1 = new LineSegment(s.getPosition().x, s.getPosition().y, k.x, k.y, s.getColor());
                myPanel1.addShape(l1);
            } else if (s instanceof Triangle) {
                Triangle t = (Triangle) s;
                Point p = t.getPoint2();
                Point p1 = t.getPoint3();
                Triangle t1 = new Triangle(s.getPosition().x, s.getPosition().y, p.x, p.y, p1.x, p1.y, s.getColor(), s.getFillColor());
                myPanel1.addShape(t1);
            }
            setData(myPanel1.getShapes());
            myPanel1.refresh(null);
        } catch (NullPointerException ex) {
        }

    }//GEN-LAST:event_copyButton1ActionPerformed

    public JComboBox<String> getjComboBox2() {
        return jComboBox2;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DrawingApplication.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DrawingApplication.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DrawingApplication.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DrawingApplication.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new DrawingApplication().setVisible(true);
            }
        });
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton RectangleButton;
    private javax.swing.JButton colorizeButton;
    private javax.swing.JButton copyButton1;
    private javax.swing.JButton deleteButton;
    private javax.swing.JComboBox<String> jComboBox2;
    private javax.swing.JFileChooser jFileChooser1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JButton lineSegmentButton;
    private javax.swing.JMenuItem loadMenuItem;
    private frontend.MyPanel myPanel1;
    private javax.swing.JButton ovalButton;
    private javax.swing.JMenuItem saveMenuItem;
    private javax.swing.JButton squareButton;
    private javax.swing.JButton triangleButton;
    // End of variables declaration//GEN-END:variables

}
